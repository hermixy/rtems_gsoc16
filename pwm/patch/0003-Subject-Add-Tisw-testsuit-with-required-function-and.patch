From dbe1a39b93fcdd2b909ae9755679c479aacc7fbd Mon Sep 17 00:00:00 2001
From: Punit Vara <punitvara@gmail.com>
Date: Thu, 2 Jun 2016 19:53:32 +0530
Subject: [PATCH 3/3] 	Subject : Add Tisw testsuit with required function and
 Macros

	This patch adds following things :
	- tisw testsuit
	- custom pinmux function
	- PWM base reigsters
---
 c/src/lib/libbsp/arm/beagle/pwm/bbb-pwm.c    |  37 +++++++++
 c/src/lib/libbsp/shared/include/gpio.h       |   2 +
 c/src/lib/libcpu/arm/shared/include/am335x.h |  19 +++++
 testsuites/samples/Makefile.am               |   2 +-
 testsuites/samples/configure.ac              |   1 +
 testsuites/samples/tisw/Makefile.am          |  19 +++++
 testsuites/samples/tisw/init.c               | 119 +++++++++++++++++++++++++++
 testsuites/samples/tisw/tisw.doc             |   9 ++
 testsuites/samples/tisw/tisw.scn             |   3 +
 9 files changed, 210 insertions(+), 1 deletion(-)
 create mode 100644 testsuites/samples/tisw/Makefile.am
 create mode 100644 testsuites/samples/tisw/init.c
 create mode 100644 testsuites/samples/tisw/tisw.doc
 create mode 100644 testsuites/samples/tisw/tisw.scn

diff --git a/c/src/lib/libbsp/arm/beagle/pwm/bbb-pwm.c b/c/src/lib/libbsp/arm/beagle/pwm/bbb-pwm.c
index 2d96a4b..1c9101d 100644
--- a/c/src/lib/libbsp/arm/beagle/pwm/bbb-pwm.c
+++ b/c/src/lib/libbsp/arm/beagle/pwm/bbb-pwm.c
@@ -1399,3 +1399,40 @@ unsigned int EHRPWMClockDisableStatusGet(unsigned int baseAdd)
     return status;
 }
 
+/**
+ * \brief   This function Enables pinmuxing for PWM module.
+ *          
+ *
+ * \param   instance  It is the instance number of EPWM of pwmsubsystem.
+ *
+ **/
+
+
+
+void EPWMPinMuxSetup(void)
+{
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_GPMC_AD(9)) = BBB_MUXMODE(4);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_GPMC_AD(8)) = BBB_MUXMODE(4);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_LCD_DATA(0)) = BBB_MUXMODE(3);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_LCD_DATA(1)) = BBB_MUXMODE(3);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_LCD_DATA(11)) = BBB_MUXMODE(2);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_LCD_DATA(10)) = BBB_MUXMODE(2);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_GPMC_AD(2)) = BBB_MUXMODE(6);
+
+        REG(AM335X_PADCONF_BASE + CONTROL_CONF_GPMC_AD(3)) = BBB_MUXMODE(6);
+
+        REG(AM335X_PADCONF_BASE + AM335X_CONF_SPI0_D0) = BBB_MUXMODE(3);
+
+        REG(AM335X_PADCONF_BASE + AM335X_CONF_SPI0_SCLK) = BBB_MUXMODE(3);
+
+        REG(AM335X_PADCONF_BASE + AM335X_CONF_MCASP0_FSX) = BBB_MUXMODE(1);
+
+        REG(AM335X_PADCONF_BASE + AM335X_CONF_MCASP0_ACLKX) = BBB_MUXMODE(1);
+}
+
diff --git a/c/src/lib/libbsp/shared/include/gpio.h b/c/src/lib/libbsp/shared/include/gpio.h
index 898628e..ca7a565 100644
--- a/c/src/lib/libbsp/shared/include/gpio.h
+++ b/c/src/lib/libbsp/shared/include/gpio.h
@@ -1053,6 +1053,8 @@ extern void EHRPWMClockDisable(unsigned int baseAdd);
 extern unsigned int EHRPWMClockEnableStatusGet(unsigned int baseAdd);
 extern unsigned int EHRPWMClockDisableStatusGet(unsigned int baseAdd);
 
+/*Added custom pinmux function to enable pwm pins*/
+extern void EPWMPinMuxSetup(void);
 
 /** @} */
 
diff --git a/c/src/lib/libcpu/arm/shared/include/am335x.h b/c/src/lib/libcpu/arm/shared/include/am335x.h
index 78b14f8..4abf103 100644
--- a/c/src/lib/libcpu/arm/shared/include/am335x.h
+++ b/c/src/lib/libcpu/arm/shared/include/am335x.h
@@ -10209,3 +10209,22 @@
 #define CM_PER_CLK_24MHZ_CLKSTCTRL_CLKTRCTRL_SW_SLEEP   (0x1u)
 #define CM_PER_CLK_24MHZ_CLKSTCTRL_CLKTRCTRL_SW_WKUP   (0x2u)
 
+/** @brief Base addresses of PWMSS memory mapped registers.                   */
+
+#define SOC_PWMSS0_REGS                     (0x48300000)
+#define SOC_PWMSS1_REGS                     (0x48302000)
+#define SOC_PWMSS2_REGS                     (0x48304000)
+#define SOC_ECAP_REGS                       (0x00000100)
+#define SOC_EQEP_REGS                       (0x00000180)
+#define SOC_EPWM_REGS                       (0x00000200)
+#define SOC_ECAP_0_REGS                     (SOC_PWMSS0_REGS + SOC_ECAP_REGS)
+#define SOC_ECAP_1_REGS                     (SOC_PWMSS1_REGS + SOC_ECAP_REGS)
+#define SOC_ECAP_2_REGS                     (SOC_PWMSS2_REGS + SOC_ECAP_REGS)
+
+#define SOC_EQEP_0_REGS                     (SOC_PWMSS0_REGS + SOC_EQEP_REGS)
+#define SOC_EQEP_1_REGS                     (SOC_PWMSS1_REGS + SOC_EQEP_REGS)
+#define SOC_EQEP_2_REGS                     (SOC_PWMSS2_REGS + SOC_EQEP_REGS) 
+
+#define SOC_EPWM_0_REGS                     (SOC_PWMSS0_REGS + SOC_EPWM_REGS)
+#define SOC_EPWM_1_REGS                     (SOC_PWMSS1_REGS + SOC_EPWM_REGS)
+#define SOC_EPWM_2_REGS                     (SOC_PWMSS2_REGS + SOC_EPWM_REGS)
diff --git a/testsuites/samples/Makefile.am b/testsuites/samples/Makefile.am
index 374617b..a943541 100644
--- a/testsuites/samples/Makefile.am
+++ b/testsuites/samples/Makefile.am
@@ -1,6 +1,6 @@
 ACLOCAL_AMFLAGS = -I ../aclocal
 
-_SUBDIRS = hello capture ticker base_sp unlimited minimum fileio
+_SUBDIRS = hello capture ticker base_sp unlimited minimum fileio tisw
 
 if MPTESTS
 ## base_mp is a sample multiprocessing test
diff --git a/testsuites/samples/configure.ac b/testsuites/samples/configure.ac
index 91a3661..b018ecb 100644
--- a/testsuites/samples/configure.ac
+++ b/testsuites/samples/configure.ac
@@ -62,6 +62,7 @@ AC_CHECK_SIZEOF([time_t])
 AC_CONFIG_FILES([Makefile
 base_sp/Makefile
 hello/Makefile
+tisw/Makefile
 loopback/Makefile
 minimum/Makefile
 fileio/Makefile
diff --git a/testsuites/samples/tisw/Makefile.am b/testsuites/samples/tisw/Makefile.am
new file mode 100644
index 0000000..e093a6e
--- /dev/null
+++ b/testsuites/samples/tisw/Makefile.am
@@ -0,0 +1,19 @@
+rtems_tests_PROGRAMS = tisw
+tisw_SOURCES = init.c
+
+dist_rtems_tests_DATA = tisw.scn
+dist_rtems_tests_DATA += tisw.doc
+
+include $(RTEMS_ROOT)/make/custom/@RTEMS_BSP@.cfg
+include $(top_srcdir)/../automake/compile.am
+include $(top_srcdir)/../automake/leaf.am
+
+
+LINK_OBJS = $(tisw_OBJECTS)
+LINK_LIBS = $(tisw_LDLIBS)
+
+hello$(EXEEXT): $(tisw_OBJECTS) $(tisw_DEPENDENCIES)
+	@rm -f tisw$(EXEEXT)
+	$(make-exe)
+
+include $(top_srcdir)/../automake/local.am
diff --git a/testsuites/samples/tisw/init.c b/testsuites/samples/tisw/init.c
new file mode 100644
index 0000000..916e651
--- /dev/null
+++ b/testsuites/samples/tisw/init.c
@@ -0,0 +1,119 @@
+/* failed Testcase according to TI SW code */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include<rtems/test.h>
+#include<bsp.h>
+#include<bsp/gpio.h>
+#include<stdio.h>
+#include<stdlib.h>
+#include<libcpu/am335x.h>
+
+#define CLOCK_DIV_VAL                 (10)
+#define SOC_EHRPWM_2_MODULE_FREQ      (100000000)  /* SYSCLKOUT = (100Mhz) TBCLK = 10^-9*/
+
+const char rtems_test_name[] = "Punit PWM test GSOC 2016";
+
+static void configure(void);
+rtems_task Init(rtems_task_argument argument);
+
+rtems_task Init(
+	rtems_task_argument ignored
+)
+{
+	rtems_test_begin();
+	printf("Starting PWM Testing");
+
+	/* Initialization PWM API*/
+	rtems_gpio_initialize();
+	PWMSSModuleClkConfig(2);
+	EPWMPinMuxSetup();
+	EHRPWMClockEnable(SOC_PWMSS2_REGS);
+
+	PWMSSTBClkEnable(2);
+	printf(" \n Hello checking started \n");
+	configure();
+	while(1);
+	}	
+
+void configure(void) {
+	EHRPWMTimebaseClkConfig(SOC_EPWM_2_REGS,SOC_EHRPWM_2_MODULE_FREQ/CLOCK_DIV_VAL,SOC_EHRPWM_2_MODULE_FREQ);
+
+	EHRPWMPWMOpFreqSet(SOC_EPWM_2_REGS,
+                       SOC_EHRPWM_2_MODULE_FREQ/CLOCK_DIV_VAL,
+                       (unsigned int)(2000), // 1 Hz -> this value specifies frequency 
+                       (unsigned int)EHRPWM_COUNT_UP,
+                       (bool)EHRPWM_SHADOW_WRITE_DISABLE);
+		/* Disable synchronization*/
+    	EHRPWMTimebaseSyncDisable(SOC_EPWM_2_REGS);
+
+    		/* Disable syncout*/
+    	EHRPWMSyncOutModeSet(SOC_EPWM_2_REGS, EHRPWM_SYNCOUT_DISABLE);
+
+    		/* Configure the emulation behaviour*/
+    	EHRPWMTBEmulationModeSet(SOC_EPWM_2_REGS, EHRPWM_STOP_AFTER_NEXT_TB_INCREMENT);
+		/* Configure Counter compare sub-module */
+    		/* Load Compare A value */
+    	EHRPWMLoadCMPA(SOC_EPWM_2_REGS,
+                   	0x20,
+                   	(bool)EHRPWM_SHADOW_WRITE_DISABLE,
+                   	(unsigned int)EHRPWM_COMPA_NO_LOAD,
+                   	(bool)EHRPWM_CMPCTL_OVERWR_SH_FL);
+
+    	/* Load Compare B value */
+    	EHRPWMLoadCMPB(SOC_EPWM_2_REGS,
+                   	0x25,
+                   	(bool)EHRPWM_SHADOW_WRITE_DISABLE,
+                   	(unsigned int) EHRPWM_COMPB_NO_LOAD,
+                   	(bool)EHRPWM_CMPCTL_OVERWR_SH_FL); 
+			/* Configure Action qualifier */
+    			/* Toggle when CTR = CMPA */
+    	EHRPWMConfigureAQActionOnB(SOC_EPWM_2_REGS,
+                                EHRPWM_AQCTLB_ZRO_EPWMXBHIGH,
+                                EHRPWM_AQCTLB_PRD_DONOTHING,
+                                EHRPWM_AQCTLB_CAU_EPWMXBLOW,
+                                EHRPWM_AQCTLB_CAD_DONOTHING,
+                                EHRPWM_AQCTLB_CBU_DONOTHING,
+                                EHRPWM_AQCTLB_CBD_DONOTHING,
+                                EHRPWM_AQSFRC_ACTSFB_DONOTHING);
+    	EHRPWMConfigureAQActionOnA(SOC_EPWM_2_REGS,
+				EHRPWM_AQCTLA_ZRO_DONOTHING,
+				EHRPWM_AQCTLA_PRD_DONOTHING,
+				EHRPWM_AQCTLA_CAU_EPWMXATOGGLE,
+				EHRPWM_AQCTLA_CAD_DONOTHING,
+				EHRPWM_AQCTLA_CBU_DONOTHING,
+				EHRPWM_AQCTLA_CBD_DONOTHING,
+				EHRPWM_AQSFRC_ACTSFA_DONOTHING); 
+
+    /* Bypass dead band sub-module */
+     EHRPWMDBOutput(SOC_EPWM_2_REGS, EHRPWM_DBCTL_OUT_MODE_BYPASS); 
+
+    /* Disable Chopper sub-module */
+    EHRPWMChopperDisable(SOC_EPWM_2_REGS); 
+    /* Disable trip events */
+    EHRPWMTZTripEventDisable(SOC_EPWM_2_REGS,(bool)EHRPWM_TZ_ONESHOT);
+    EHRPWMTZTripEventDisable(SOC_EPWM_2_REGS,(bool)EHRPWM_TZ_CYCLEBYCYCLE);
+    EHRPWMHRDisable(SOC_EPWM_2_REGS);
+	printf("COnfiguration finished \n");
+}
+
+
+/* NOTICE: the clock driver is enabled */
+#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
+#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
+
+#define CONFIGURE_MAXIMUM_TASKS            1
+#define CONFIGURE_USE_DEVFS_AS_BASE_FILESYSTEM
+
+#define CONFIGURE_MAXIMUM_SEMAPHORES    1
+
+#define CONFIGURE_RTEMS_INIT_TASKS_TABLE 
+
+#define CONFIGURE_EXTRA_TASK_STACKS         (2 * RTEMS_MINIMUM_STACK_SIZE)
+
+#define CONFIGURE_INITIAL_EXTENSIONS RTEMS_TEST_INITIAL_EXTENSION
+
+#define CONFIGURE_INIT
+#include <rtems/confdefs.h>
diff --git a/testsuites/samples/tisw/tisw.doc b/testsuites/samples/tisw/tisw.doc
new file mode 100644
index 0000000..9812864
--- /dev/null
+++ b/testsuites/samples/tisw/tisw.doc
@@ -0,0 +1,9 @@
+#  COPYRIGHT (c) 1989-1999.
+#  On-Line Applications Research Corporation (OAR).
+#
+#  The license and distribution terms for this file may be
+#  found in the file LICENSE in this distribution or at
+#  http://www.rtems.org/license/LICENSE.
+#
+
+
diff --git a/testsuites/samples/tisw/tisw.scn b/testsuites/samples/tisw/tisw.scn
new file mode 100644
index 0000000..f88b1c6
--- /dev/null
+++ b/testsuites/samples/tisw/tisw.scn
@@ -0,0 +1,3 @@
+*** PWM TEST ***
+PWM Testing
+*** END OF PWM TEST ***
-- 
2.7.1

